const express = require('express');
var bodyParser = require('body-parser');
const app = express();
const port = 3000;

const mariadb = require('mariadb');
const pool = mariadb.createPool({
        host : 'localhost',
        user : 'root',
        password: 'root',
        port: 3306,
        connectionLimit:5
});

const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');

const options = {
    swaggerDefinition :{
        info:{
            title: 'Personal Budget API',
            version: '1.0.0',
            description: 'Personal Budget API autogenerated by'
        },
        host: '137.184.140.231:3000',
        basePath: '/',
    },
    apis: ['./server.js'],
}

const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));
app.use(cors());

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

/**
 * @swagger
 * /agents:
 *     get:
 *       description: Return all prices
 *       produces:
 *          - application/json
 *       responses:
 *          200:
 *              description: Object food containing array of food object with prices
*/
app.get('/agents',(req,resp) =>{
    pool.query('SELECT * from sample.agents')
        .then(res => {
                resp.statusCode = 200;
                resp.setHeader('Content-Type','Application/json');
                resp.send(res);
                })
        .catch(err => console.error('Error exccuting query', err.stack));
    // res.json(prices);
});


/**
 * @swagger
 * /agents:
 *  put:
 *    description: Updates agents
 *    consumes: 
 *    - application/json
 *    produces:
 *    - application/json
 *    parameters:
 *    - in: body
 *      name: agentCode
 *      required: true
 *      schema:
 *        type: string
 *        $ref: "#/definitions/agent"
 *    requestBody:
 *      request: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: "#definitions/agent"
 *    responses: 
 *      200:
 *       description: A successfull response
 * definitions:
 *   agent:
 *     type: object
 *     required:
 *     - agentCode
 *     - agentName
 *     - workingArea
 *     - commission
 *     - phoneNo
 *     - country
 *     properties:
 *       agentCode:
 *         type: string
 *         example: A023
 *       agentName:
 *         type: string
 *         example: Wilson
 *       workingArea: 
 *         type: string
 *         example: Banglore
 *       commission:
 *         type: number
 *         example: 0.15
 *       phoneNo:
 *         type: string
 *         example: 1234567890
 *       country:
 *         type: string
 *         example: India
*/
app.put('/agents',(req,resp) =>{
    pool.query(`update sample.agents set agent_name = '${req['body'].agentName}',  working_area = '${req['body'].workingArea}', commission  = '${req['body'].commission}', phone_no = '${req['body'].phoneNo}', country = '${req['body'].country}' where agent_code = '${req['body'].agentCode}'`).then(res => {
                console.log(res.affectedRows);
                if(res.affectedRows > 0)
                {
                        resp.statusCode = 200;
                        resp.setHeader('Content-Type','Application/json');
                        resp.send(res);
                }
                else{
                        resp.statusCode = 201;
                        resp.setHeader('Content-Type','text/plain');
                        resp.send("The agent is not located in the table - Operation  unsuccessful");
                }
              })
        .catch(err =>{
                resp.statusCode = 404;
                console.error('Error exccuting query', err.stack);
                resp.setHeader('Content-Type','text/plain');
                resp.send('Error executing query' + err.stack);
        });
});



/**
 * @swagger
 * /agents:
 *  post:
 *    description: Updates agents
 *    consumes:
 *    - application/json
 *    produces:
 *    - application/json
 *    parameters:
 *    - in: body
 *      name: agentCode
 *      required: true
 *      schema:
 *        type: string
 *        $ref: "#/definitions/agent"
 *    requestBody:
 *      request: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: "#definitions/agent"
 *    responses:
 *      200:
 *       description: A successfull response
 * definitions:
 *   agent:
 *     type: object
 *     required:
 *     - agentCode
 *     - agentName
 *     - workingArea
 *     - commission
 *     - phoneNo
 *     - country
 *     properties:
 *       agentCode:
 *         type: string
 *         example: A023
 *       agentName:
 *         type: string
 *         example: Wilson
 *       workingArea:
 *         type: string
 *         example: Banglore
 *       commission:
 *         type: number
 *         example: 0.15
 *       phoneNo:
 *         type: string
 *         example: 1234567890
 *       country:
 *         type: string
 *         example: India
*/
app.post('/agents',(req,resp) =>{
    console.log(req['body']);
    pool.query(`insert into sample.agents values ('${req['body'].agentCode}', '${req['body'].agentName}', '${req['body'].workingArea}', '${req['body'].commission}', '${req['body'].phone_no}', '${req['body'].country}')`).then(res => {
               if(res.affectedRows > 0)
                {
                        resp.statusCode = 200;
                        resp.setHeader('Content-Type','text/plain');
                        resp.send('Successfully Inserted the record');
                }
                else{
                        resp.statusCode = 201;
                        resp.setHeader('Content-Type','text/plain');
                        resp.send("The record is not inserted into the table - Operation  unsuccessful");
                }
              })
        .catch(err =>{
                resp.statusCode = 404;
                console.error('Error exccuting query', err.stack);
                resp.setHeader('Content-Type','text/plain');
                resp.send('Error executing query' + err.stack);
               })
});

/**
 * @swagger
 * /agents:
 *  delete:
 *    description: Updates agents
 *    consumes:
 *    - application/json
 *    produces:
 *    - application/json
 *    parameters:
 *    - in: body
 *      name: agentCode
 *      required: true
 *      schema:
 *        type: string
 *        $ref: "#/definitions/agentDelete"
 *    requestBody:
 *      request: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: "#definitions/agentDelete"
 *    responses:
 *      200:
 *       description: A successfull response
 * definitions:
 *   agentDelete:
 *     type: object
 *     required:
 *     - agentCode
 *     properties:
 *       agentCode:
 *         type: string
 *         example: A008
*/
app.delete('/agents',(req,resp) =>{
    console.log(req['body']);
//    res.status(200).send("Succesfully sent");
pool.query(`Delete from sample.agents where agent_code = '${req['body'].agentCode}'`).then(res => {
               if(res.affectedRows > 0)
                {
                        resp.statusCode = 200;
                        resp.setHeader('Content-Type','text/plain');
                        resp.send('Successfully Deleted the record');
                }
                else{
                        resp.statusCode = 201;
                        resp.setHeader('Content-Type','text/plain');
                        resp.send("The record is not found in the table - Operation  unsuccessful");
                }
              })
        .catch(err =>{
                resp.statusCode = 404;
                console.error('Error exccuting query', err.stack);
                resp.setHeader('Content-Type','text/plain');
                resp.send('Error executing query' + err.stack);
});
});

/**
 * @swagger
 * /agents:
 *  patch:
 *    description: Updates or inserts agents
 *    consumes:
 *    - application/json
 *    produces:
 *    - application/json
 *    parameters:
 *    - in: body
 *      name: agentCode
 *      required: true
 *      schema:
 *        type: string
 *        $ref: "#/definitions/agentPatch"
 *    requestBody:
 *      request: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: "#definitions/agentPatch"
 *    responses:
 *      200:
 *       description: A successfull response
 * definitions:
 *   agentPatch:
 *     type: object
 *     required:
 *     - agentCode
 *     properties:
 *       agentCode:
 *         type: string
 *         example: A008
 *       agentName:
 *         type: string
 *         example: Wilson
 *       workingArea:
 *         type: string
 *         example: Banglore
 *       commission:
 *         type: number
 *         example: 0.15
 *       phoneNo:
 *         type: string
 *         example: 1234567890
 *       country:
 *         type: string
 *         example: India
*/
app.patch('/agents',(req,resp) =>{
   
pool.query(`update sample.agents set agent_name = '${req['body'].agentName}',  working_area = '${req['body'].workingArea}', commission  = '${req['body'].commission}', phone_no = '${req['body'].phoneNo}', country = '${req['body'].country}' where agent_code = '${req['body'].agentCode}'`).then(res => {
               if(res.affectedRows > 0)
                {
                        resp.statusCode = 200;
                        resp.setHeader('Content-Type','text/plain');
                        resp.send('Successfully updated the record');
                }
                else{
               pool.query(`insert into sample.agents values ('${req['body'].agentCode}', '${req['body'].agentName}', '${req['body'].workingArea}', '${req['body'].commission}', '${req['body'].phone_no}', '${req['body'].country}')`).then(res => {
               if(res.affectedRows > 0)
                {
                        resp.statusCode = 200;
                        resp.setHeader('Content-Type','text/plain');
                        resp.send('Successfull patched the record');
                }
                else{
                        resp.statusCode = 201;
                        resp.setHeader('Content-Type','text/plain');
                        resp.send("The record is not inserted or updated into the table - Operation  unsuccessful");
                }
              })
        .catch(err =>{
                resp.statusCode = 404;
                console.error('Error exccuting query', err.stack);
                resp.setHeader('Content-Type','text/plain');
                resp.send('Error executing query' + err.stack);
               })
 }
              })
        .catch(err =>{
                resp.statusCode = 404;
                console.error('Error exccuting query', err.stack);
                resp.setHeader('Content-Type','text/plain');
                resp.send('Error executing query' + err.stack);
               })
        .catch(err => console.error('Error exccuting query', err.stack));
});

app.listen(port, ()=>{
    console.log(`API server at ${port}`);
})
